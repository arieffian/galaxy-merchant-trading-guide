// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/parsers/parser.go

// Package mock_parsers is a generated GoMock package.
package mock_parsers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParserService is a mock of ParserService interface.
type MockParserService struct {
	ctrl     *gomock.Controller
	recorder *MockParserServiceMockRecorder
}

// MockParserServiceMockRecorder is the mock recorder for MockParserService.
type MockParserServiceMockRecorder struct {
	mock *MockParserService
}

// NewMockParserService creates a new mock instance.
func NewMockParserService(ctrl *gomock.Controller) *MockParserService {
	mock := &MockParserService{ctrl: ctrl}
	mock.recorder = &MockParserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserService) EXPECT() *MockParserServiceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParserService) Parse(params []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserServiceMockRecorder) Parse(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParserService)(nil).Parse), params)
}
