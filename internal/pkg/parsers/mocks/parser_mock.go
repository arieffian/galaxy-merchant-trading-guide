// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/parsers/parser.go

// Package mock_parsers is a generated GoMock package.
package mock_parsers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParserService is a mock of ParserService interface.
type MockParserService struct {
	ctrl     *gomock.Controller
	recorder *MockParserServiceMockRecorder
}

// MockParserServiceMockRecorder is the mock recorder for MockParserService.
type MockParserServiceMockRecorder struct {
	mock *MockParserService
}

// NewMockParserService creates a new mock instance.
func NewMockParserService(ctrl *gomock.Controller) *MockParserService {
	mock := &MockParserService{ctrl: ctrl}
	mock.recorder = &MockParserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserService) EXPECT() *MockParserServiceMockRecorder {
	return m.recorder
}

// DoesQuestion mocks base method.
func (m *MockParserService) DoesQuestion(question []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesQuestion", question)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesQuestion indicates an expected call of DoesQuestion.
func (mr *MockParserServiceMockRecorder) DoesQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesQuestion", reflect.TypeOf((*MockParserService)(nil).DoesQuestion), question)
}

// GetCurrencyValue mocks base method.
func (m *MockParserService) GetCurrencyValue(param []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyValue", param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyValue indicates an expected call of GetCurrencyValue.
func (mr *MockParserServiceMockRecorder) GetCurrencyValue(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyValue", reflect.TypeOf((*MockParserService)(nil).GetCurrencyValue), param)
}

// HowManyQuestion mocks base method.
func (m *MockParserService) HowManyQuestion(question []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HowManyQuestion", question)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HowManyQuestion indicates an expected call of HowManyQuestion.
func (mr *MockParserServiceMockRecorder) HowManyQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HowManyQuestion", reflect.TypeOf((*MockParserService)(nil).HowManyQuestion), question)
}

// HowMuchQuestion mocks base method.
func (m *MockParserService) HowMuchQuestion(question []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HowMuchQuestion", question)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HowMuchQuestion indicates an expected call of HowMuchQuestion.
func (mr *MockParserServiceMockRecorder) HowMuchQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HowMuchQuestion", reflect.TypeOf((*MockParserService)(nil).HowMuchQuestion), question)
}

// IsQuestion mocks base method.
func (m *MockParserService) IsQuestion(question []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQuestion", question)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsQuestion indicates an expected call of IsQuestion.
func (mr *MockParserServiceMockRecorder) IsQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQuestion", reflect.TypeOf((*MockParserService)(nil).IsQuestion), question)
}

// ParseCurrency mocks base method.
func (m *MockParserService) ParseCurrency(param []string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCurrency", param)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParseCurrency indicates an expected call of ParseCurrency.
func (mr *MockParserServiceMockRecorder) ParseCurrency(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCurrency", reflect.TypeOf((*MockParserService)(nil).ParseCurrency), param)
}

// ParseMetal mocks base method.
func (m *MockParserService) ParseMetal(param []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMetal", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMetal indicates an expected call of ParseMetal.
func (mr *MockParserServiceMockRecorder) ParseMetal(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMetal", reflect.TypeOf((*MockParserService)(nil).ParseMetal), param)
}

// ProcessQuestion mocks base method.
func (m *MockParserService) ProcessQuestion(questions []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessQuestion", questions)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessQuestion indicates an expected call of ProcessQuestion.
func (mr *MockParserServiceMockRecorder) ProcessQuestion(questions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessQuestion", reflect.TypeOf((*MockParserService)(nil).ProcessQuestion), questions)
}
