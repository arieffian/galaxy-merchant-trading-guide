// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/converters/converter.go

// Package mock_converters is a generated GoMock package.
package mock_converters

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConverterService is a mock of ConverterService interface.
type MockConverterService struct {
	ctrl     *gomock.Controller
	recorder *MockConverterServiceMockRecorder
}

// MockConverterServiceMockRecorder is the mock recorder for MockConverterService.
type MockConverterServiceMockRecorder struct {
	mock *MockConverterService
}

// NewMockConverterService creates a new mock instance.
func NewMockConverterService(ctrl *gomock.Controller) *MockConverterService {
	mock := &MockConverterService{ctrl: ctrl}
	mock.recorder = &MockConverterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterService) EXPECT() *MockConverterServiceMockRecorder {
	return m.recorder
}

// AlienToRoman mocks base method.
func (m *MockConverterService) AlienToRoman(alienDictionary map[string]string, alienNumber []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlienToRoman", alienDictionary, alienNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlienToRoman indicates an expected call of AlienToRoman.
func (mr *MockConverterServiceMockRecorder) AlienToRoman(alienDictionary, alienNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlienToRoman", reflect.TypeOf((*MockConverterService)(nil).AlienToRoman), alienDictionary, alienNumber)
}

// ArabicToRoman mocks base method.
func (m *MockConverterService) ArabicToRoman(number int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArabicToRoman", number)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArabicToRoman indicates an expected call of ArabicToRoman.
func (mr *MockConverterServiceMockRecorder) ArabicToRoman(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArabicToRoman", reflect.TypeOf((*MockConverterService)(nil).ArabicToRoman), number)
}

// RomanToArabic mocks base method.
func (m *MockConverterService) RomanToArabic(romanNumber string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RomanToArabic", romanNumber)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RomanToArabic indicates an expected call of RomanToArabic.
func (mr *MockConverterServiceMockRecorder) RomanToArabic(romanNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RomanToArabic", reflect.TypeOf((*MockConverterService)(nil).RomanToArabic), romanNumber)
}
